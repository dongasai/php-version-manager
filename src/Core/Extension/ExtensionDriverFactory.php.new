<?php

namespace VersionManager\Core\Extension;

/**
 * 扩展驱动工厂类
 * 
 * 用于创建和管理扩展驱动
 */
class ExtensionDriverFactory
{
    /**
     * 驱动实例缓存
     *
     * @var array
     */
    private static $instances = [];
    
    /**
     * 驱动类映射
     *
     * @var array
     */
    private static $driverMap = [];
    
    /**
     * 获取扩展驱动实例
     *
     * @param string $extension 扩展名称
     * @param string $distro 发行版名称（可选）
     * @param string $arch 架构名称（可选）
     * @return ExtensionDriverInterface
     * @throws \Exception 如果找不到驱动则抛出异常
     */
    public static function getDriver($extension, $distro = null, $arch = null)
    {
        // 生成驱动键
        $driverKey = $extension;
        if ($distro && $arch) {
            $driverKey = $distro . ':' . $arch . ':' . $extension;
        } elseif ($distro) {
            $driverKey = $distro . ':' . $extension;
        }
        
        // 如果已经有实例，则直接返回
        if (isset(self::$instances[$driverKey])) {
            return self::$instances[$driverKey];
        }
        
        // 尝试加载驱动类映射
        self::loadDriverMap();
        
        // 查找驱动类
        $driverClass = null;
        
        // 先尝试查找特定发行版和架构的驱动
        if ($distro && $arch) {
            $driverClass = self::findDriverClass($distro . ':' . $arch . ':' . $extension);
        }
        
        // 如果没有找到，则尝试查找特定发行版的驱动
        if (!$driverClass && $distro) {
            $driverClass = self::findDriverClass($distro . ':' . $extension);
        }
        
        // 如果还是没有找到，则尝试查找通用驱动
        if (!$driverClass) {
            $driverClass = self::findDriverClass($extension);
        }
        
        // 如果找不到驱动类，则使用通用驱动
        if (!$driverClass) {
            $driverClass = GenericExtensionDriver::class;
        }
        
        // 创建驱动实例
        if ($driverClass === GenericExtensionDriver::class) {
            $driver = new $driverClass($extension);
        } else {
            $driver = new $driverClass();
        }
        
        // 缓存实例
        self::$instances[$driverKey] = $driver;
        
        return $driver;
    }
    
    /**
     * 加载驱动类映射
     */
    private static function loadDriverMap()
    {
        // 如果已经加载，则直接返回
        if (!empty(self::$driverMap)) {
            return;
        }
        
        // 加载驱动类映射配置
        $configFile = __DIR__ . '/../../../config/extensions/driver_map.php';
        if (file_exists($configFile)) {
            self::$driverMap = require $configFile;
        }
    }
    
    /**
     * 查找驱动类
     *
     * @param string $extension 扩展名称
     * @return string|null 驱动类名，如果找不到则返回null
     */
    private static function findDriverClass($extension)
    {
        // 直接查找驱动映射
        if (isset(self::$driverMap[$extension])) {
            return self::$driverMap[$extension];
        }
        
        // 如果是特定发行版或架构的扩展，则提取扩展名称
        $extensionName = $extension;
        if (strpos($extension, ':') !== false) {
            $parts = explode(':', $extension);
            $extensionName = end($parts);
        }
        
        // 尝试查找特定驱动类
        $driverClass = __NAMESPACE__ . '\\Drivers\\' . ucfirst($extensionName);
        if (class_exists($driverClass)) {
            return $driverClass;
        }
        
        // 尝试查找特定驱动类（小写）
        $driverClass = __NAMESPACE__ . '\\Drivers\\' . strtolower($extensionName);
        if (class_exists($driverClass)) {
            return $driverClass;
        }
        
        // 尝试从扩展目录中查找最匹配的驱动
        return self::findBestMatchDriver($extension, $extensionName);
    }
    
    /**
     * 从扩展目录中查找最匹配的驱动
     *
     * @param string $extension 完整的扩展名称（可能包含发行版和架构信息）
     * @param string $extensionName 纯扩展名称
     * @return string|null 驱动类名，如果找不到则返回null
     */
    private static function findBestMatchDriver($extension, $extensionName)
    {
        // 扩展目录路径
        $extensionDir = __DIR__ . '/Drivers/' . ucfirst($extensionName);
        if (!is_dir($extensionDir)) {
            $extensionDir = __DIR__ . '/Drivers/' . strtolower($extensionName);
            if (!is_dir($extensionDir)) {
                return null;
            }
        }
        
        // 解析扩展名称中的发行版和架构信息
        $distro = null;
        $arch = null;
        
        if (strpos($extension, ':') !== false) {
            $parts = explode(':', $extension);
            if (count($parts) >= 3) {
                $distro = $parts[0];
                $arch = $parts[1];
            } elseif (count($parts) == 2) {
                $distro = $parts[0];
            }
        }
        
        // 获取扩展目录中的所有PHP文件
        $files = glob($extensionDir . '/*.php');
        if (empty($files)) {
            return null;
        }
        
        // 匹配规则和分数
        $bestMatch = null;
        $bestScore = -1;
        
        foreach ($files as $file) {
            $className = basename($file, '.php');
            $classNameLower = strtolower($className);
            $score = 0;
            
            // 基础分数
            $score += 1;
            
            // 如果有发行版和架构信息，则检查是否完全匹配
            if ($distro && $arch) {
                $distroArch = strtolower($distro) . strtolower($arch);
                if (strpos($classNameLower, $distroArch) !== false) {
                    $score += 20; // 完全匹配给予最高分
                }
            }
            
            // 如果有发行版和版本信息，则检查是否匹配
            if ($distro) {
                // 检查是否包含发行版和版本号，如Ubuntu22
                $distroWithVersion = strtolower($distro) . '\\d+';
                if (preg_match('/' . $distroWithVersion . '/i', $classNameLower)) {
                    $score += 15; // 发行版+版本匹配给予高分
                }
                // 检查是否包含发行版名称，如Ubuntu
                elseif (strpos($classNameLower, strtolower($distro)) !== false) {
                    $score += 10; // 发行版匹配给予中等分
                }
            }
            
            // 如果有架构信息，则检查是否匹配
            if ($arch && strpos($classNameLower, strtolower($arch)) !== false) {
                $score += 5; // 架构匹配给予低分
            }
            
            // 更新最佳匹配
            if ($score > $bestScore) {
                $bestScore = $score;
                $bestMatch = __NAMESPACE__ . '\\Drivers\\' . ucfirst($extensionName) . '\\' . $className;
            }
        }
        
        // 检查类是否存在
        if ($bestMatch && class_exists($bestMatch)) {
            return $bestMatch;
        }
        
        return null;
    }
    
    /**
     * 注册驱动类
     *
     * @param string $extension 扩展名称
     * @param string $driverClass 驱动类名
     */
    public static function registerDriver($extension, $driverClass)
    {
        self::$driverMap[$extension] = $driverClass;
        
        // 清除实例缓存
        if (isset(self::$instances[$extension])) {
            unset(self::$instances[$extension]);
        }
    }
}
