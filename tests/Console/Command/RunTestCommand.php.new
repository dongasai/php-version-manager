<?php

namespace Tests\Console\Command;

use VersionManager\Core\Process\Process;

/**
 * 运行测试命令
 */
class RunTestCommand
{
    /**
     * 命令名称
     */
    private $name = 'test:run';
    
    /**
     * 命令描述
     */
    private $description = '运行PVM单元测试';
    
    /**
     * 执行命令
     *
     * @param array $args 命令参数
     * @return int 返回状态码
     */
    public function execute(array $args = [])
    {
        // 解析参数
        $options = $this->parseOptions($args);
        
        echo "===== PHP Version Manager 测试 =====\n\n";
        
        $test = $options['test'] ?? null;
        $runAll = isset($options['all']) && $options['all'];
        $version = $options['php-version'] ?? '7.4.33';
        $showOutput = isset($options['show-output']) || isset($options['o']);
        $verbose = isset($options['verbose']) || isset($options['v']);
        
        // 显示测试环境信息
        $this->showEnvironmentInfo();
        
        // 确定要运行的测试
        $tests = [];
        if ($runAll) {
            $tests = $this->getAllTests();
            echo "\n运行所有测试\n";
        } elseif ($test) {
            $tests = [$test];
            echo "\n运行测试: $test\n";
        } else {
            echo "\n运行默认测试\n";
            $tests = ['version_detector', 'version_installer', 'version_switcher'];
        }
        
        // 运行测试
        $results = [];
        $totalTests = count($tests);
        $passedTests = 0;
        
        echo "\n进度: [0/$totalTests]\n";
        
        foreach ($tests as $i => $testName) {
            echo "测试: $testName\n";
            
            $result = $this->runTest($testName, $version, $verbose || $showOutput);
            $results[$testName] = $result;
            
            if ($result['success']) {
                $passedTests++;
            }
            
            echo "进度: [" . ($i + 1) . "/$totalTests]\n";
        }
        
        // 显示测试结果
        echo "\n测试结果:\n";
        
        foreach ($results as $testName => $result) {
            $status = $result['success'] ? "通过" : "失败";
            echo "$testName: $status\n";
            
            if (!$result['success'] || $verbose || $showOutput) {
                echo $result['output'] . "\n";
            }
        }
        
        // 显示测试摘要
        echo "\n测试摘要:\n";
        echo "总测试数: $totalTests\n";
        echo "通过测试数: $passedTests\n";
        echo "失败测试数: " . ($totalTests - $passedTests) . "\n";
        
        // 返回状态码
        return $passedTests === $totalTests ? 0 : 1;
    }
    
    /**
     * 显示测试环境信息
     */
    private function showEnvironmentInfo(): void
    {
        echo "测试环境:\n";
        
        // PHP版本
        echo "PHP版本: " . PHP_VERSION . "\n";
        
        // 操作系统
        $os = php_uname('s') . ' ' . php_uname('r');
        echo "操作系统: " . $os . "\n";
        
        // 当前目录
        echo "当前目录: " . getcwd() . "\n";
        
        // PVM信息
        $pvmPath = getenv('HOME') . '/.pvm';
        $pvmInstalled = is_dir($pvmPath);
        echo "PVM安装状态: " . ($pvmInstalled ? '已安装' : '未安装') . "\n";
        
        if ($pvmInstalled) {
            // 获取已安装的PHP版本
            $versionsDir = $pvmPath . '/versions';
            if (is_dir($versionsDir)) {
                $versions = array_filter(scandir($versionsDir), function($item) use ($versionsDir) {
                    return $item !== '.' && $item !== '..' && is_dir($versionsDir . '/' . $item);
                });
                
                if (!empty($versions)) {
                    echo "已安装的PHP版本: " . implode(', ', $versions) . "\n";
                } else {
                    echo "已安装的PHP版本: 无\n";
                }
            }
        }
    }
    
    /**
     * 获取所有可用的测试
     */
    private function getAllTests(): array
    {
        return [
            'version_detector',
            'version_installer',
            'version_switcher',
            'version_remover',
            'extension_manager',
            'composer_manager',
            'mirror_config'
        ];
    }
    
    /**
     * 运行指定的测试
     */
    private function runTest(string $testName, string $version, bool $verbose): array
    {
        $testFile = __DIR__ . "/../../test_{$testName}.php";
        
        // 如果测试文件不存在，尝试其他可能的路径
        if (!file_exists($testFile)) {
            $testFile = __DIR__ . "/../../{$testName}_test.php";
        }
        
        // 如果仍然不存在，返回错误
        if (!file_exists($testFile)) {
            return [
                'success' => false,
                'output' => "测试文件不存在: $testFile"
            ];
        }
        
        // 设置环境变量
        $env = [
            'PVM_TEST_VERSION' => $version,
            'PVM_TEST_VERBOSE' => $verbose ? '1' : '0'
        ];
        
        // 运行测试
        $process = new Process(['php', $testFile], null, $env);
        $process->setTimeout(300); // 5分钟超时
        
        if ($verbose) {
            echo "执行命令: php $testFile\n";
            
            $process->run(function ($type, $buffer) {
                echo $buffer;
            });
        } else {
            $process->run();
        }
        
        return [
            'success' => $process->getExitCode() === 0,
            'output' => $process->getOutput() . $process->getErrorOutput()
        ];
    }
    
    /**
     * 解析命令行选项
     *
     * @param array $args 命令行参数
     * @return array 解析后的选项
     */
    private function parseOptions(array $args): array
    {
        $options = [];
        
        foreach ($args as $i => $arg) {
            // 处理选项
            if (strpos($arg, '--') === 0) {
                $option = substr($arg, 2);
                
                // 处理带值的选项
                if (strpos($option, '=') !== false) {
                    list($name, $value) = explode('=', $option, 2);
                    $options[$name] = $value;
                } else {
                    $options[$option] = true;
                }
            } elseif (strpos($arg, '-') === 0) {
                $option = substr($arg, 1);
                $options[$option] = true;
            } elseif ($i === 0) {
                // 第一个非选项参数作为测试名称
                $options['test'] = $arg;
            }
        }
        
        return $options;
    }
    
    /**
     * 获取命令名称
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }
    
    /**
     * 获取命令描述
     *
     * @return string
     */
    public function getDescription(): string
    {
        return $this->description;
    }
}
