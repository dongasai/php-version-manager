name: CI Tests

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  php-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['7.4', '8.0', '8.1', '8.2', '8.3']

    name: PHP ${{ matrix.php }} Tests
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: composer

      - name: Install dependencies
        run: |
          if [ -f composer.json ]; then
            composer install --prefer-dist --no-progress
          fi

      - name: Install BATS
        run: sudo apt-get update && sudo apt-get install -y bats

      - name: Run BATS tests
        run: |
          if [ -d tests/bats ]; then
            bats tests/bats/
          else
            echo "No BATS tests found, skipping..."
          fi

      - name: Test PVM Mirror PHP compatibility
        run: |
          # 测试pvm-mirror在当前PHP版本下的基本功能
          php -v
          php -l bin/pvm-mirror

          # 测试配置文件语法
          find configMirror -name "*.php" -exec php -l {} \;

          # 测试源代码语法
          find srcMirror -name "*.php" -exec php -l {} \;

  docker-tests:
    runs-on: ubuntu-latest
    name: Docker Tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker build
        run: |
          cd docker/pvm-mirror

          # 测试Dockerfile语法
          docker build --dry-run -f Dockerfile ../../ || echo "Dockerfile syntax check"

          # 构建测试镜像
          docker build -t pvm-mirror:test -f Dockerfile ../../

          # 基本功能测试
          docker run --rm pvm-mirror:test php -v
          docker run --rm pvm-mirror:test php -l /app/bin/pvm-mirror

      - name: Test Docker Compose
        run: |
          cd docker/pvm-mirror

          # 验证compose文件语法
          docker compose -f dev-compose.yml config
          docker compose -f prod-compose.yml config

          # 测试环境变量验证脚本
          chmod +x validate-env.sh
          ./validate-env.sh || echo "Environment validation completed"

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'